package com.easylearning.testcontroller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.easylearning.controller.EmployeeController;
import com.easylearning.entity.Employee;
import com.easylearning.service.EmployeeServiceImpl;

@WebMvcTest(value = EmployeeController.class)
public class TestEmployeeController {

	@MockBean
	private EmployeeServiceImpl employeeServiceImpl;

	@Autowired
	private MockMvc mockMvc;

	public void getAllEmployees() throws Exception {

		List<Employee> employees = new ArrayList<>();
		employees.add(new Employee(10, "saddam", "Backend role"));
		employees.add(new Employee(20, "Ravi", "support role"));

		when(employeeServiceImpl.getListOfEmployees()).thenReturn(employees);

		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/api/v1/list");

		ResultActions perform = mockMvc.perform(requestBuilder);

		MvcResult result = perform.andReturn();

		MockHttpServletResponse response = result.getResponse();
		int status = response.getStatus();
		assertEquals(200, status);

	}

}
